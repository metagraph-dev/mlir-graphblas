// RUN: graphblas-opt %s | graphblas-exec matrix_matrix_multiply_csc_csc | FileCheck %s

#matmul_accesses = [
  (m, n, k) -> (m, k),
  (m, n, k) -> (k, n),
  (m, n, k) -> (m, n)
]
#matmul_trait = {
  doc = "C(m, n) += A(m, k) * B(k, n)",
  indexing_maps = #matmul_accesses,
  iterator_types = ["parallel", "parallel", "reduction"]
}

module {

    func @bogus(%A: tensor<?x?xf64>, %B: tensor<?x?xf64>, %C: tensor<?x?xf64>) {
        linalg.generic #matmul_trait
          ins(%A, %B : memref<?x?xf64>,
                       memref<?x?xf64)
          outs(%C : memref<?x?xf64>) {
          ^bb0(%a: f32, %b: f64, %c: f32) :
            %d = arith.mulf %a, %b: f32
            %e = arith.addf %c, %d: f32
            linalg.yield %e : f32
        }
        return
    }
}
