name: Test and Deploy

on:
  # Run this workflow every time a PR is opened or a new commit is pushed to the PR
  pull_request:
  # Run this workflow every time a PR is merged to main or a release tag is added
  push:
    branches:
      - main
    tags:
      - '*'

jobs:
  build:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        pyver:
          - 3.8
      fail-fast: false
    runs-on: ${{ matrix.os }}
    env:
      ARTIFACT_NAME: built_package_py${{matrix.pyver}}_${{matrix.os}}.tar.bz2
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Create env
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          activate-environment: mg
          environment-file: continuous_integration/environment.yml
      - name: Update env
        run: |
          conda install -q conda-build
          pip install -e .
          conda list
      - name: Lint with Black
        run: |
          black --version
          black mlir_graphblas . --check --diff
      - name: Lint with clang-format
        run: |
          clang-format --version
          ./run-clang-format.py -r mlir_graphblas/src/
      - name: Pytest
        run: |
          pytest -s --forked --pyargs mlir_graphblas.tests
      - name: Coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          conda install -c conda-forge coveralls
          coveralls --service=github
        continue-on-error: true
      - name: Conda Build
        run: |
          conda build -c metagraph/label/dev -c conda-forge --python ${{ matrix.pyver }} continuous_integration/conda # temp restriction to use metagraph dev label
          # This doesn't rebuild, but simply computes the name of the file that was previously built
          OUTPUT=$(conda build --output -c metagraph/label/dev -c conda-forge continuous_integration/conda) # temp restriction to use metagraph dev label
          echo $OUTPUT
          # Build tarball of output
          mkdir tarball
          cd tarball
          for outpt in $OUTPUT; do
            cp $outpt .
          done
          tar -cf output.tar `ls`
          echo "CONDA_BUILD_OUTPUT=`pwd`/output.tar" >> $GITHUB_ENV
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.CONDA_BUILD_OUTPUT }}
          retention-days: 7

  test_pyver:
    needs: build
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        pyver:
          - 3.8
    runs-on: ${{ matrix.os }}
    env:
      ARTIFACT_NAME: built_package_py${{matrix.pyver}}_${{matrix.os}}.tar.bz2
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./artifact_storage
      - name: Create env
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.pyver }}
      - name: Update env
        run: |
          # Install test-specific dependencies
          conda install pytest coverage pytest-cov pytest-forked
          conda install -c conda-forge grblas>=1.3.13 scipy
          # Install built_packages
          cd ./artifact_storage
          tar -xvf output.tar
          rm output.tar
          conda install `ls`
          cd ..
          # Install dependencies listed in built package
          # (This is a workaround because conda does not install dependencies for local file installs)
          conda update -c metagraph/label/dev -c conda-forge mlir-graphblas # temp restriction to use metagraph dev label
          conda list
      - name: Pytest
        run: |
          pytest --forked --pyargs mlir_graphblas.tests

  dev_deploy:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        pyver:
          - 3.8
    runs-on: ${{ matrix.os }}
    needs: test_pyver
    if: (github.ref == 'refs/heads/main') || contains(github.ref, 'refs/tags/')
    env:
      ARTIFACT_NAME: built_package_py${{matrix.pyver}}_${{matrix.os}}.tar.bz2
      AC_LABEL: dev
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./artifact_storage
      - name: Determine label
        if: contains(github.ref, 'refs/tags/')
        run: |
          echo "AC_LABEL=main" >> $GITHUB_ENV
      - name: Create env
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: 3.8
      - name: Deploy to Anaconda Cloud
        shell: bash -l {0}
        run: |
          conda install -q anaconda-client
          cd ./artifact_storage
          tar -xvf output.tar
          rm output.tar
          ls -la .
          UPLOAD=`ls .`
          echo "Uploading $UPLOAD with label=${{ env.AC_LABEL }}"
          anaconda -t ${{ secrets.ANACONDA_ORG_TOKEN }} upload -u metagraph -l ${{ env.AC_LABEL }} --no-progress --force --no-register $UPLOAD
